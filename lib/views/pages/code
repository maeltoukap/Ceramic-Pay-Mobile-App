// import 'package:adaptive_theme/adaptive_theme.dart';
// import 'package:ceramicpay/const/constants.dart';
// import 'package:flutter/material.dart';

// class Settings extends StatefulWidget {
//   @override
//   _SettingsState createState() => _SettingsState();
// }

// class _SettingsState extends State<Settings> {
//   @override
//   Widget build(BuildContext context) {
//     return AdaptiveTheme(
//       light: ThemeData(
//         brightness: Brightness.light,
//         primarySwatch: Colors.red,
//         accentColor: Colors.amber,
//       ),
//       dark: ThemeData(
//         brightness: Brightness.dark,
//         primarySwatch: Colors.red,
//         accentColor: Colors.amber,
//       ),
//       initial: AdaptiveThemeMode.light,
//       builder: (theme, darkTheme) => MaterialApp(
//         title: 'Adaptive Theme Demo',
//         theme: theme,
//         darkTheme: darkTheme,
//         home: Scaffold(
//           appBar: AppBar(
//             elevation: 10.0,
//             title: Text(
//               "Parametres",
//               textAlign: TextAlign.center,
//               style: TextStyle(
//                 fontSize: 20.0,
//                 fontWeight: FontWeight.w200,
//                 fontFamily: 'Poppins',
//                 color: kwhite,
//               ),
//             ),
//             backgroundColor: kbrown,
//           ),
//           body: Container(
//             decoration: BoxDecoration(
//               borderRadius: BorderRadius.circular(10.0),
//             ),
//             child: Column(
//               children: [
//                 RaisedButton(onPressed: () => 
// AdaptiveTheme.of(context).toggleThemeMode(),),
//                 Row(
//                   children: [
//                     Text("Activer le mode sombre"),
//                   ],
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//     // Scaffold(
//     //   appBar: AppBar(
//     //     elevation: 10.0,
//     //     title: Text(
//     //       "Parametres",
//     //       textAlign: TextAlign.center,
//     //       style: TextStyle(
//     //         fontSize: 20.0,
//     //         fontWeight: FontWeight.w200,
//     //         fontFamily: 'Poppins',
//     //         color: kwhite,
//     //       ),
//     //     ),
//     //     backgroundColor: kbrown,
//     //   ),
//     //   body: Container(
//     //     decoration: BoxDecoration(
//     //       borderRadius: BorderRadius.circular(10.0),
//     //     ),
//     //     child: Column(
//     //       children: [
//     //         Row(
//     //           children: [
//     //             Text("Activer le mode sombre"),
//     //           ],
//     //         ),
//     //       ],
//     //     ),
//     //   ),
//     // );
//   }
// }

import 'package:adaptive_theme/adaptive_theme.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';

// void main() async {
//   WidgetsFlutterBinding.ensureInitialized();
//   final savedThemeMode = await AdaptiveTheme.getThemeMode();
//   runApp(MyApp(savedThemeMode: savedThemeMode));
// }

class Settings extends StatelessWidget {
  final AdaptiveThemeMode savedThemeMode;

  const Settings({Key key, this.savedThemeMode}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return AdaptiveTheme(
      light: ThemeData(
        brightness: Brightness.light,
        primarySwatch: Colors.red,
        accentColor: Colors.amber,
      ),
      dark: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.red,
        accentColor: Colors.amber,
      ),
      initial: savedThemeMode ?? AdaptiveThemeMode.light,
      builder: (theme, darkTheme) => MaterialApp(
        title: 'Adaptive Theme Demo',
        theme: theme,
        darkTheme: darkTheme,
        home: MyHomePage(),
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return AnimatedTheme(
      duration: Duration(milliseconds: 300),
      data: Theme.of(context),
      child: Scaffold(
        appBar: AppBar(
          // automaticallyImplyLeading: true,
          title: Text('Adaptive Theme Demo'),
        ),
        body: SizedBox.expand(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              RaisedButton(
                onPressed: () {
                  AdaptiveTheme.of(context).toggleThemeMode();
                },
                child: Text('Toggle Theme Mode'),
              ),
              RaisedButton(
                onPressed: () {
                  AdaptiveTheme.of(context).setDark();
                },
                child: Text('Set Dark'),
              ),
              RaisedButton(
                onPressed: () {
                  AdaptiveTheme.of(context).setLight();
                },
                child: Text('set Light'),
              ),
              RaisedButton(
                onPressed: () {
                  AdaptiveTheme.of(context).setSystem();
                },
                child: Text('Set System Default'),
              ),
            ],
          ),
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () {},
          child: Icon(Icons.add),
        ),
      ),
    );
  }
}




import 'package:ceramicpay/api/api.dart';
import 'package:ceramicpay/models/qrCode_model.dart';
import 'package:ceramicpay/models/user_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_barcode_scanner/flutter_barcode_scanner.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:ceramicpay/const/constants.dart';
import 'package:ceramicpay/const/routes.dart';

class DrawerMenu extends StatefulWidget {
  @override
  _DrawerMenuState createState() => _DrawerMenuState();
}

class _DrawerMenuState extends State<DrawerMenu> {
  List<QrModel> qrList = [];
  getData() async {
    List data = await Api.scanQrCode();
    if (data != null) {
      // for (var item in data) {
      for (var item = 0; item < data.length; item++) {
        // qrList.add(data);
        // print(data[item]);
        var bdQrCode = data[item];
        print(bdQrCode);
        // String qr = data;
        // print(qr);
    return bdQrCode;
      }
    }
    // print(qrList);
    // print(data);
  }

  @override
  String qrCode = 'Unknown';
  Widget build(BuildContext context) {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          DrawerHeader(
            decoration: BoxDecoration(
              color: kbrown,
            ),
            // child: Text('Drawer Header'),
            child: Icon(
              FontAwesomeIcons.user,
              size: 70.0,
              color: kwhite,
            ),
            // child: CircleAvatar(
            //     child: Icon(
            //   FontAwesomeIcons.user,
            //   color: kwhite,
            // ),),
          ),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.home),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'Acceuil',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () {
              // Update the state of the app
              // ...
              // Then close the drawer
              // Navigator.pop(context);
              Routes.HomeNavigator(context);
            },
          ),
          Divider(),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.qrcode),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'Scanner Code',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () => scanQRCode(),
          ),
          Divider(),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.stream),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'Mes Codes',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () {
              // Update the state of the app
              // ...
              // Then close the drawer
              Routes.CodesNavigator(context);
            },
          ),
          Divider(),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.userCog),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'Mon Profil',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () {
              // Update the state of the app
              // ...
              // Then close the drawer
              Routes.ProfileNavigator(context);
            },
          ),
          Divider(),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.cogs),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'Parametres',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () {
              // Update the state of the app
              // ...
              // Then close the drawer
              Routes.SettingsNavigator(context);
            },
          ),
          Divider(),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.solidEnvelope),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'A Propos',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () {
              // Update the state of the app
              // ...
              // Then close the drawer
              Routes.AboutNavigator(context);
            },
          ),
          Divider(),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.solidEnvelope),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'A fgf',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () {
              // Update the state of the app
              // ...
              // Then close the drawer
              getData();
            },
          ),
          Divider(),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.infoCircle),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'Aide',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () {
              // Update the state of the app
              // ...
              // Then close the drawer
              Routes.HelpNavigator(context);
            },
          ),
          Divider(),
          ListTile(
            title: Row(
              children: [
                Icon(FontAwesomeIcons.signOutAlt),
                SizedBox(
                  width: 30.0,
                ),
                Text(
                  'Deconnexion',
                  style: TextStyle(fontSize: 19.0),
                ),
              ],
            ),
            onTap: () {
              // Update the state of the app
              // ...
              // Then close the drawer
              Routes.LoginNavigator(context);
              UserModel.logOut();
            },
          ),
          Padding(
            padding: const EdgeInsets.only(top: 70.0),
            child: Align(
              alignment: FractionalOffset.bottomCenter,
              child: Text(
                "Copyright 💡 Mael Toukap | 2021",
                style: TextStyle(
                  fontSize: 10.0,
                  fontWeight: FontWeight.w200,
                  fontFamily: 'Poppins',
                  color: kblack,
                ),
              ),
            ),
          ),
          // ListTile(
          //   title: Text('Item 2'),
          //   onTap: () {
          //     // Update the state of the app
          //     // ...
          //     // Then close the drawer
          //     Navigator.pop(context);
          //   },
          // ),
        ],
      ),
    );
  }

  Future<void> scanQRCode() async {
    try {
      final qrCode = await FlutterBarcodeScanner.scanBarcode(
        '#ff6666',
        'Cancel',
        true,
        ScanMode.QR,
      );

      if (!mounted) return;

      setState(() {
        this.qrCode = qrCode;
      });
      
    List data = await Api.scanQrCode();
    if (data != null) {
      // for (var item in data) {
      for (var item = 0; item < data.length; item++) {
        // qrList.add(data);
        // print(data[item]);
        var bdQrCode = data[item];
        print(bdQrCode);
        // String qr = data;
        // print(qr);
    // return bdQrCode;

      if (this.qrCode == bdQrCode) {
      // if (this.qrCode == getData) {
        showDialog<String>(
          context: context,
          builder: (BuildContext context) => AlertDialog(
            title: const Text('Felicitation vous avez gagné '),
            content: Text('$qrCode'),
            actions: <Widget>[
              // TextButton(
              //   onPressed: () => Navigator.pop(context, 'Cancel'),
              //   child: const Text('Cancel'),
              // ),
              TextButton(
                onPressed: () => Navigator.pop(context, 'OK'),
                child: const Text('OK'),
              ),
            ],
          ),
        );
      } else if (this.qrCode != bdQrCode) {
        showDialog<String>(
          context: context,
          builder: (BuildContext context) => AlertDialog(
            title: const Text('Desole qr code incorrect'),
            content: qrCode == "-1" ? Text('') : Text('$qrCode'),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                  scanQRCode();
                },
                child: const Text('Reessayer'),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context, 'OK'),
                child: const Text('OK'),
              ),
            ],
          ),
        );
      }
      }
    }
    } on PlatformException {
      // qrCode = 'Failed to get platform version.';
      qrCode = 'Plateforme non prise en charge';
    }
  }
}




                  Container(
                    height: MediaQuery.of(context).size.height/1.5,
                  child: ListView.builder(
                      itemCount: couponModel.length,
                      itemBuilder: (context, i) {
                        final coupon = couponModel[i];
                        if (coupon.idUser == id) {
                          coupons = coupon.idScan.length;
                          if (coupons == null) {
                            coupons = 0;
                          }
                          if (coupon.valider != 1) {
                            nonValider = coupon.idScan.length;
                            if (nonValider == null) {
                              nonValider = 0;
                            }
                            // gagne = valider * 300;
                          }
                          if (coupon.valider != 0) {
                            valider = coupon.idScan.length;
                            if (valider == null) {
                              valider = 0;
                            }
                            // gagne = valider * 300;
                          }
                        }
                        return 